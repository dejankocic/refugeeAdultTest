{"version":3,"sources":["./src/core/features/login/pages/forgotten-password/forgotten-password.html","./src/core/features/login/guards/has-sites.ts","./src/core/features/login/login-lazy.module.ts","./src/core/features/login/pages/forgotten-password/forgotten-password.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,4RAA6N,8CAA8C,4XAA4X,0DAA0D,8IAA8I,2DAA2D,8SAA8S,qCAAqC,gNAAgN,qCAAqC,qMAAqM,iCAAiC,gPAAgP,4CAA4C,0FAA0F,4CAA4C,0UAA0U,qCAAqC,wGAAwG,E;;;;;;;;;;;;ACAhkF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEU;AAGC;AACM;AACb;AAEsB;IAG9C,sBAAsB,SAAtB,sBAAsB;IAE/B;;OAEG;IACH,WAAW;QACP,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,OAAO;QACH,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACW,KAAK;;YACf,MAAM,KAAK,GAAG,MAAM,+DAAS,CAAC,YAAY,CAAC,yDAAS,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;YAErE,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClB,OAAO,IAAI,CAAC;aACf;YAED,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,sEAAe,CAAC,mBAAmB,EAAE,CAAC;YAC7D,MAAM,KAAK,GAAG,kDAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEpC,KAAK,CAAC,WAAW,GAAG,MAAM,CAAC;YAE3B,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;CAEJ;AApCY,sBAAsB;IADlC,gEAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;GACtB,sBAAsB,CAoClC;AApCkC;;;;;;;;;;;;;ACxBnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEQ;AACc;AAEC;AACI;AACe;AACjB;AACmD;AAE7G,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,MAAM;QACjB,UAAU,EAAE,OAAO;KACtB;IACD;QACI,IAAI,EAAE,MAAM;QACZ,YAAY,EAAE,GAAG,EAAE,CAAC,0WAAkC,CAAC,IAAI,CAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,uBAAuB,CAAC;KAC/F;IACD;QACI,IAAI,EAAE,aAAa;QACnB,YAAY,EAAE,GAAG,EAAE,CAAC,sEAAe,CAAC,yBAAyB,EAAE;KAClE;IACD;QACI,IAAI,EAAE,OAAO;QACb,YAAY,EAAE,GAAG,EAAE,CAAC,4NAAoC,CAAC,IAAI,CAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,wBAAwB,CAAC;QAC/F,OAAO,EAAE,CAAC,wEAAsB,CAAC;QACjC,WAAW,EAAE,CAAC,wEAAsB,CAAC;KACxC;IACD;QACI,IAAI,EAAE,mBAAmB;QACzB,SAAS,EAAE,0HAA8B;KAC5C;IACD;QACI,IAAI,EAAE,gBAAgB;QACtB,YAAY,EAAE,GAAG,EAAE,CAAC,4SAAwD;aACvE,IAAI,CAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,iCAAiC,CAAC;KACvD;IACD;QACI,IAAI,EAAE,YAAY;QAClB,YAAY,EAAE,GAAG,EAAE,CAAC,4QAAgD,CAAC,IAAI,CAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,6BAA6B,CAAC;KACnH;IACD;QACI,IAAI,EAAE,aAAa;QACnB,YAAY,EAAE,GAAG,EAAE,CAAC,oRAAkD,CAAC,IAAI,CAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,8BAA8B,CAAC;KACtH;IACD;QACI,IAAI,EAAE,WAAW;QACjB,YAAY,EAAE,GAAG,EAAE,CAAC,sEAAe,CAAC,uBAAuB,EAAE;KAChE;CACJ,CAAC;IAYW,mBAAmB,SAAnB,mBAAmB;CAAG;AAAtB,mBAAmB;IAV/B,8DAAQ,CAAC;QACN,OAAO,EAAE;YACL,oEAAgB;YAChB,uFAAyB;YACzB,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;SAChC;QACD,YAAY,EAAE;YACV,0HAA8B;SACjC;KACJ,CAAC;GACW,mBAAmB,CAAG;AAAH;;;;;;;;;;;;;AC5EhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEwC;AACL;AAEjB;AACqB;AAChC;AAEY;AACP;AACK;AAG+C;AAEjG;;GAEG;IAKU,8BAA8B,SAA9B,8BAA8B;IAWvC,YAAsB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAF9C,sCAAiC,GAAG,KAAK,CAAC;IAEO,CAAC;IAElD;;OAEG;IACG,QAAQ;;;YACV,MAAM,OAAO,GAAG,iEAAa,CAAC,aAAa,CAAS,SAAS,CAAC,CAAC;YAC/D,IAAI,CAAC,OAAO,EAAE;gBACV,gEAAY,CAAC,cAAc,CAAC,wBAAwB,CAAC,CAAC;gBACtD,iEAAa,CAAC,IAAI,EAAE,CAAC;gBAErB,OAAO;aACV;YAED,MAAM,UAAU,GAAG,iEAAa,CAAC,aAAa,CAA+B,YAAY,CAAC,CAAC;YAE3F,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,SAAS,GAAG,+DAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;YAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;gBACjC,KAAK,EAAE,CAAC,UAAU,EAAE,yDAAU,CAAC,QAAQ,CAAC;gBACxC,KAAK,EAAE,CAAC,iEAAa,CAAC,aAAa,CAAS,UAAU,CAAC,IAAI,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;aACtF,CAAC,CAAC;YAEH,IAAI,CAAC,aAAa,GAAG,UAAU,IAAI,IAAI,8GAA0B,CAAC,UAAU,CAAC,CAAC;YAC9E,IAAI,CAAC,iBAAiB,SAAG,IAAI,CAAC,aAAa,0CAAE,iBAAiB,EAAE,CAAC;YACjE,IAAI,CAAC,iCAAiC,GAAG,MAAM,qFAAe,CAAC,iCAAiC,CAAC,OAAO,CAAC,CAAC;;KAC7G;IAED;;;;OAIG;IACG,aAAa,CAAC,CAAQ;;YACxB,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,CAAC,CAAC,eAAe,EAAE,CAAC;YAEpB,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;YACtC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;YAEtC,IAAI,CAAC,KAAK,EAAE;gBACR,gEAAY,CAAC,cAAc,CAAC,4BAA4B,EAAE,IAAI,CAAC,CAAC;gBAEhE,OAAO;aACV;YAED,MAAM,KAAK,GAAG,MAAM,gEAAY,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;YACxE,MAAM,MAAM,GAAG,KAAK,IAAI,OAAO,CAAC;YAEhC,IAAI;gBACA,MAAM,QAAQ,GAAG,MAAM,qFAAe,CAAC,oBAAoB,CACvD,IAAI,CAAC,OAAO,EACZ,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,EACnB,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CACtB,CAAC;gBAEF,IAAI,QAAQ,CAAC,MAAM,IAAI,WAAW,EAAE;oBAChC,0BAA0B;oBAC1B,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAS,CAAC,CAAC;iBAC9C;qBAAM,IAAI,QAAQ,CAAC,MAAM,IAAI,6BAA6B,IAAI,QAAQ,CAAC,MAAM,IAAI,6BAA6B,EAAE;oBAC7G,oBAAoB;oBACpB,gEAAY,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;iBAChD;qBAAM;oBACH,WAAW;oBACX,0DAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;oBAE5D,MAAM,gEAAY,CAAC,SAAS,CAAC,qDAAS,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACjF,MAAM,iEAAa,CAAC,IAAI,EAAE,CAAC;oBAC3B,MAAM,qFAAe,CAAC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC9D;aACJ;YAAC,OAAO,KAAK,EAAE;gBACZ,gEAAY,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;aACtC;oBAAS;gBACN,KAAK,CAAC,OAAO,EAAE,CAAC;aACnB;QACL,CAAC;KAAA;IAED,mCAAmC;IACzB,SAAS,CAAC,MAAe,EAAE,QAAiC;QAClE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,UAAU,IAAI,CAAC,MAAM,CAAC,EAAE;gBAChF,gEAAY,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC7C,MAAM;aACT;SACJ;IACL,CAAC;CAEJ;;YAvHQ,0DAAW;;;0BAsBf,uDAAS,SAAC,mBAAmB;;AAFrB,8BAA8B;IAJ1C,+DAAS,CAAC;QACP,QAAQ,EAAE,oCAAoC;QAC9C,oQAAsC;KACzC,CAAC;GACW,8BAA8B,CAmG1C;AAnG0C","file":"login-lazy-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n\\n        <ion-title>\\n            <h1>{{ 'core.login.passwordforgotten' | translate }}</h1>\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <div class=\\\"list-item-limited-width\\\">\\n        <core-login-exceeded-attempts *ngIf=\\\"canContactSupport && wasPasswordResetRequestedRecently\\\" [supportConfig]=\\\"supportConfig\\\"\\n            [supportSubject]=\\\"'core.login.exceededpasswordresetattemptssupportsubject' | translate\\\">\\n            {{ 'core.login.exceededpasswordresetattempts' | translate }}\\n        </core-login-exceeded-attempts>\\n\\n        <ion-list>\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>{{ 'core.login.passwordforgotteninstructions2' | translate }}</ion-label>\\n            </ion-item>\\n        </ion-list>\\n        <ion-card>\\n            <form [formGroup]=\\\"myForm\\\" (ngSubmit)=\\\"resetPassword($event)\\\" #resetPasswordForm>\\n                <ion-item-divider class=\\\"ion-text-wrap\\\">\\n                    <ion-label>\\n                        <h2>{{ 'core.login.searchby' | translate }}</h2>\\n                    </ion-label>\\n                </ion-item-divider>\\n                <ion-radio-group formControlName=\\\"field\\\">\\n                    <ion-item>\\n                        <ion-label>{{ 'core.login.username' | translate }}</ion-label>\\n                        <ion-radio slot=\\\"end\\\" value=\\\"username\\\"></ion-radio>\\n                    </ion-item>\\n                    <ion-item>\\n                        <ion-label>{{ 'core.user.email' | translate }}</ion-label>\\n                        <ion-radio slot=\\\"end\\\" value=\\\"email\\\"></ion-radio>\\n                    </ion-item>\\n                </ion-radio-group>\\n                <ion-item>\\n                    <ion-label class=\\\"sr-only\\\">{{ 'core.login.usernameoremail' | translate }}</ion-label>\\n                    <ion-input type=\\\"text\\\" name=\\\"value\\\" placeholder=\\\"{{ 'core.login.usernameoremail' | translate }}\\\" formControlName=\\\"value\\\"\\n                        autocapitalize=\\\"none\\\" autocorrect=\\\"off\\\" [core-auto-focus]=\\\"autoFocus\\\">\\n                    </ion-input>\\n                </ion-item>\\n                <ion-button type=\\\"submit\\\" class=\\\"ion-margin\\\" expand=\\\"block\\\" [disabled]=\\\"!myForm.valid\\\">\\n                    {{ 'core.courses.search' | translate }}\\n                </ion-button>\\n            </form>\\n        </ion-card>\\n    </div>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Injectable } from '@angular/core';\nimport { CanActivate, CanLoad, UrlTree } from '@angular/router';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Router } from '@singletons';\n\nimport { CoreLoginHelper } from '../services/login-helper';\n\n@Injectable({ providedIn: 'root' })\nexport class CoreLoginHasSitesGuard implements CanActivate, CanLoad {\n\n    /**\n     * @inheritdoc\n     */\n    canActivate(): Promise<true | UrlTree> {\n        return this.guard();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    canLoad(): Promise<true | UrlTree> {\n        return this.guard();\n    }\n\n    /**\n     * Check if the user has any sites stored.\n     *\n     * @returns Promise resolved with true if it's not redirected or the redirection route.\n     */\n    private async guard(): Promise<true | UrlTree> {\n        const sites = await CoreUtils.ignoreErrors(CoreSites.getSites(), []);\n\n        if (sites.length > 0) {\n            return true;\n        }\n\n        const [path, params] = CoreLoginHelper.getAddSiteRouteInfo();\n        const route = Router.parseUrl(path);\n\n        route.queryParams = params;\n\n        return route;\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { CoreLoginHasSitesGuard } from './guards/has-sites';\nimport { CoreLoginComponentsModule } from './components/components.module';\nimport { CoreLoginHelper } from './services/login-helper';\nimport { CoreLoginForgottenPasswordPage } from '@features/login/pages/forgotten-password/forgotten-password';\n\nconst routes: Routes = [\n    {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'sites',\n    },\n    {\n        path: 'site',\n        loadChildren: () => import('./pages/site/site.module').then( m => m.CoreLoginSitePageModule),\n    },\n    {\n        path: 'credentials',\n        loadChildren: () => CoreLoginHelper.getCredentialsRouteModule(),\n    },\n    {\n        path: 'sites',\n        loadChildren: () => import('./pages/sites/sites.module').then( m => m.CoreLoginSitesPageModule),\n        canLoad: [CoreLoginHasSitesGuard],\n        canActivate: [CoreLoginHasSitesGuard],\n    },\n    {\n        path: 'forgottenpassword',\n        component: CoreLoginForgottenPasswordPage,\n    },\n    {\n        path: 'changepassword',\n        loadChildren: () => import('./pages/change-password/change-password.module')\n            .then( m => m.CoreLoginChangePasswordPageModule),\n    },\n    {\n        path: 'sitepolicy',\n        loadChildren: () => import('./pages/site-policy/site-policy.module').then( m => m.CoreLoginSitePolicyPageModule),\n    },\n    {\n        path: 'emailsignup',\n        loadChildren: () => import('./pages/email-signup/email-signup.module').then( m => m.CoreLoginEmailSignupPageModule),\n    },\n    {\n        path: 'reconnect',\n        loadChildren: () => CoreLoginHelper.getReconnectRouteModule(),\n    },\n];\n\n@NgModule({\n    imports: [\n        CoreSharedModule,\n        CoreLoginComponentsModule,\n        RouterModule.forChild(routes),\n    ],\n    declarations: [\n        CoreLoginForgottenPasswordPage,\n    ],\n})\nexport class CoreLoginLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, ViewChild, ElementRef, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { Translate } from '@singletons';\nimport { CoreWSExternalWarning } from '@services/ws';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreForms } from '@singletons/form';\nimport { CorePlatform } from '@services/platform';\nimport { CoreSitePublicConfigResponse } from '@classes/site';\nimport { CoreUserSupportConfig } from '@features/user/classes/support/support-config';\nimport { CoreUserGuestSupportConfig } from '@features/user/classes/support/guest-support-config';\n\n/**\n * Page to recover a forgotten password.\n */\n@Component({\n    selector: 'page-core-login-forgotten-password',\n    templateUrl: 'forgotten-password.html',\n})\nexport class CoreLoginForgottenPasswordPage implements OnInit {\n\n    @ViewChild('resetPasswordForm') formElement?: ElementRef;\n\n    myForm!: FormGroup;\n    siteUrl!: string;\n    autoFocus!: boolean;\n    supportConfig?: CoreUserSupportConfig;\n    canContactSupport?: boolean;\n    wasPasswordResetRequestedRecently = false;\n\n    constructor(protected formBuilder: FormBuilder) {}\n\n    /**\n     * Initialize the component.\n     */\n    async ngOnInit(): Promise<void> {\n        const siteUrl = CoreNavigator.getRouteParam<string>('siteUrl');\n        if (!siteUrl) {\n            CoreDomUtils.showErrorModal('Site URL not supplied.');\n            CoreNavigator.back();\n\n            return;\n        }\n\n        const siteConfig = CoreNavigator.getRouteParam<CoreSitePublicConfigResponse>('siteConfig');\n\n        this.siteUrl = siteUrl;\n        this.autoFocus = CorePlatform.is('tablet');\n        this.myForm = this.formBuilder.group({\n            field: ['username', Validators.required],\n            value: [CoreNavigator.getRouteParam<string>('username') || '', Validators.required],\n        });\n\n        this.supportConfig = siteConfig && new CoreUserGuestSupportConfig(siteConfig);\n        this.canContactSupport = this.supportConfig?.canContactSupport();\n        this.wasPasswordResetRequestedRecently = await CoreLoginHelper.wasPasswordResetRequestedRecently(siteUrl);\n    }\n\n    /**\n     * Request to reset the password.\n     *\n     * @param e Event.\n     */\n    async resetPassword(e: Event): Promise<void> {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const field = this.myForm.value.field;\n        const value = this.myForm.value.value;\n\n        if (!value) {\n            CoreDomUtils.showErrorModal('core.login.usernameoremail', true);\n\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n        const isMail = field == 'email';\n\n        try {\n            const response = await CoreLoginHelper.requestPasswordReset(\n                this.siteUrl,\n                isMail ? '' : value,\n                isMail ? value : '',\n            );\n\n            if (response.status == 'dataerror') {\n                // Error in the data sent.\n                this.showError(isMail, response.warnings!);\n            } else if (response.status == 'emailpasswordconfirmnotsent' || response.status == 'emailpasswordconfirmnoemail') {\n                // Error, not found.\n                CoreDomUtils.showErrorModal(response.notice);\n            } else {\n                // Success.\n                CoreForms.triggerFormSubmittedEvent(this.formElement, true);\n\n                await CoreDomUtils.showAlert(Translate.instant('core.success'), response.notice);\n                await CoreNavigator.back();\n                await CoreLoginHelper.passwordResetRequested(this.siteUrl);\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    // Show an error from the warnings.\n    protected showError(isMail: boolean, warnings: CoreWSExternalWarning[]): void {\n        for (let i = 0; i < warnings.length; i++) {\n            const warning = warnings[i];\n            if ((warning.item == 'email' && isMail) || (warning.item == 'username' && !isMail)) {\n                CoreDomUtils.showErrorModal(warning.message);\n                break;\n            }\n        }\n    }\n\n}\n"],"sourceRoot":"webpack:///"}